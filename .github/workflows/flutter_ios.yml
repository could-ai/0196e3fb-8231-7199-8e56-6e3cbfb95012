name: Flutter iOS Build and Publish
on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      package_name:
        description: "iOS bundle identifier"
        required: true
        default: "com.example.couldai_user_app"
jobs:
  flutter_ios_build_publish:
    runs-on: macos-latest
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Install Fastlane
        run: gem install fastlane
      - name: Get dependencies
        working-directory: ./usr
        run: flutter pub get
      - name: Prepare iOS certificate
        working-directory: ./usr/ios
        run: |
          # 创建证书文件
          echo "${{ secrets.IOS_P12_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          echo "Certificate decoded and saved to certificate.p12"
      - name: Create iOS Fastfile
        run: |
          mkdir -p ./usr/ios/fastlane
          echo '# Disable Fastlane'"'"'s usage data collection' > ./usr/ios/fastlane/Fastfile
          echo 'opt_out_usage' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '# Required dependencies' >> ./usr/ios/fastlane/Fastfile
          echo 'require "json"' >> ./usr/ios/fastlane/Fastfile
          echo 'require "securerandom"' >> ./usr/ios/fastlane/Fastfile
          echo 'require "fileutils"' >> ./usr/ios/fastlane/Fastfile
          echo 'require "base64"' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo 'default_platform(:ios)' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo 'platform :ios do' >> ./usr/ios/fastlane/Fastfile
          echo '  desc "Build and publish iOS app"' >> ./usr/ios/fastlane/Fastfile
          echo '  lane :build_and_publish do' >> ./usr/ios/fastlane/Fastfile
          echo '    # 主线流程' >> ./usr/ios/fastlane/Fastfile
          echo '    begin' >> ./usr/ios/fastlane/Fastfile
          echo '      # 1. 设置代码签名' >> ./usr/ios/fastlane/Fastfile
          echo '      update_code_signing_settings(' >> ./usr/ios/fastlane/Fastfile
          echo '        use_automatic_signing: false,' >> ./usr/ios/fastlane/Fastfile
          echo '        path: "../ios/Runner.xcodeproj",' >> ./usr/ios/fastlane/Fastfile
          echo '        code_sign_identity: "Apple Distribution"' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 2. 创建和设置临时keychain' >> ./usr/ios/fastlane/Fastfile
          echo '      keychain_name = "ios-build.keychain"' >> ./usr/ios/fastlane/Fastfile
          echo '      keychain_password = SecureRandom.base64' >> ./usr/ios/fastlane/Fastfile
          echo '      create_keychain(' >> ./usr/ios/fastlane/Fastfile
          echo '        name: keychain_name,' >> ./usr/ios/fastlane/Fastfile
          echo '        password: keychain_password,' >> ./usr/ios/fastlane/Fastfile
          echo '        default_keychain: true,' >> ./usr/ios/fastlane/Fastfile
          echo '        unlock: true,' >> ./usr/ios/fastlane/Fastfile
          echo '        timeout: 3600' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 3. 导入证书到keychain' >> ./usr/ios/fastlane/Fastfile
          echo '      import_certificate(' >> ./usr/ios/fastlane/Fastfile
          echo '        certificate_path: "certificate.p12",' >> ./usr/ios/fastlane/Fastfile
          echo '        certificate_password: ENV["IOS_CERTIFICATE_PASSWORD"],' >> ./usr/ios/fastlane/Fastfile
          echo '        keychain_name: keychain_name,' >> ./usr/ios/fastlane/Fastfile
          echo '        keychain_password: keychain_password' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 4. 解析App Store Connect凭证' >> ./usr/ios/fastlane/Fastfile
          echo '      api_key_json = ENV["APP_STORE_CREDENTIALS_JSON"].to_s' >> ./usr/ios/fastlane/Fastfile
          echo '      # 清理JSON字符串中的特殊字符' >> ./usr/ios/fastlane/Fastfile
          echo '      api_key_json = api_key_json.gsub(/\\u0000/, "").gsub(/\\0/, "")' >> ./usr/ios/fastlane/Fastfile
          echo '      api_key_data = JSON.parse(api_key_json)' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 5. 创建p8密钥文件' >> ./usr/ios/fastlane/Fastfile
          echo '      key_path = "api_key.p8"' >> ./usr/ios/fastlane/Fastfile
          echo '      raw_key = api_key_data["api_key"].to_s' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 检查密钥格式并处理' >> ./usr/ios/fastlane/Fastfile
          echo '      if raw_key.include?("-----BEGIN PRIVATE KEY-----")' >> ./usr/ios/fastlane/Fastfile
          echo '        # 已经是p8格式' >> ./usr/ios/fastlane/Fastfile
          echo '        UI.message("Using p8 key directly")' >> ./usr/ios/fastlane/Fastfile
          echo '        File.write(key_path, raw_key)' >> ./usr/ios/fastlane/Fastfile
          echo '      else' >> ./usr/ios/fastlane/Fastfile
          echo '        # 尝试Base64解码' >> ./usr/ios/fastlane/Fastfile
          echo '        UI.message("Decoding Base64 key")' >> ./usr/ios/fastlane/Fastfile
          echo '        # 清理Base64字符串，只保留有效字符' >> ./usr/ios/fastlane/Fastfile
          echo '        base64_key = raw_key.gsub(/[^A-Za-z0-9+\/=]/, "")' >> ./usr/ios/fastlane/Fastfile
          echo '        begin' >> ./usr/ios/fastlane/Fastfile
          echo '          decoded_key = Base64.strict_decode64(base64_key)' >> ./usr/ios/fastlane/Fastfile
          echo '          File.write(key_path, decoded_key)' >> ./usr/ios/fastlane/Fastfile
          echo '        rescue => decode_error' >> ./usr/ios/fastlane/Fastfile
          echo '          # 解码失败，尝试使用原始内容' >> ./usr/ios/fastlane/Fastfile
          echo '          UI.error("Base64 decoding failed: #{decode_error.message}")' >> ./usr/ios/fastlane/Fastfile
          echo '          UI.message("Falling back to original key content")' >> ./usr/ios/fastlane/Fastfile
          echo '          File.write(key_path, raw_key)' >> ./usr/ios/fastlane/Fastfile
          echo '        end' >> ./usr/ios/fastlane/Fastfile
          echo '      end' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 验证密钥文件' >> ./usr/ios/fastlane/Fastfile
          echo '      if !File.exist?(key_path) || File.size(key_path) == 0' >> ./usr/ios/fastlane/Fastfile
          echo '        UI.user_error!("Failed to create valid key file")' >> ./usr/ios/fastlane/Fastfile
          echo '      end' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 6. 创建App Store Connect API密钥' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.message("Creating App Store Connect API key")' >> ./usr/ios/fastlane/Fastfile
          echo '      api_key = app_store_connect_api_key(' >> ./usr/ios/fastlane/Fastfile
          echo '        key_id: api_key_data["key_id"],' >> ./usr/ios/fastlane/Fastfile
          echo '        issuer_id: api_key_data["issuer_id"],' >> ./usr/ios/fastlane/Fastfile
          echo '        key_filepath: key_path,' >> ./usr/ios/fastlane/Fastfile
          echo '        in_house: false' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '      # 删除临时密钥文件' >> ./usr/ios/fastlane/Fastfile
          echo '      FileUtils.rm_f(key_path) if File.exist?(key_path)' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 7. 获取配置文件' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.message("Generating provisioning profile")' >> ./usr/ios/fastlane/Fastfile
          echo '      sigh(' >> ./usr/ios/fastlane/Fastfile
          echo '        app_identifier: ENV["PACKAGE_NAME"],' >> ./usr/ios/fastlane/Fastfile
          echo '        api_key: api_key' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 8. 构建应用' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.message("Building application")' >> ./usr/ios/fastlane/Fastfile
          echo '      gym(' >> ./usr/ios/fastlane/Fastfile
          echo '        workspace: "../ios/Runner.xcworkspace",' >> ./usr/ios/fastlane/Fastfile
          echo '        scheme: "Runner",' >> ./usr/ios/fastlane/Fastfile
          echo '        output_directory: "./build/ios/ipa",' >> ./usr/ios/fastlane/Fastfile
          echo '        output_name: "app.ipa",' >> ./usr/ios/fastlane/Fastfile
          echo '        export_method: "app-store",' >> ./usr/ios/fastlane/Fastfile
          echo '        xcargs: "-allowProvisioningUpdates",' >> ./usr/ios/fastlane/Fastfile
          echo '        include_symbols: true,' >> ./usr/ios/fastlane/Fastfile
          echo '        include_bitcode: false,' >> ./usr/ios/fastlane/Fastfile
          echo '        export_options: {' >> ./usr/ios/fastlane/Fastfile
          echo '          method: "app-store",' >> ./usr/ios/fastlane/Fastfile
          echo '          provisioningProfiles: {' >> ./usr/ios/fastlane/Fastfile
          echo '            ENV["PACKAGE_NAME"] => lane_context[SharedValues::SIGH_NAME]' >> ./usr/ios/fastlane/Fastfile
          echo '          }' >> ./usr/ios/fastlane/Fastfile
          echo '        },' >> ./usr/ios/fastlane/Fastfile
          echo '        clean: true' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo '      # 9. 上传到App Store' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.message("Uploading to App Store Connect")' >> ./usr/ios/fastlane/Fastfile
          echo '      upload_to_app_store(' >> ./usr/ios/fastlane/Fastfile
          echo '        api_key: api_key,' >> ./usr/ios/fastlane/Fastfile
          echo '        app_identifier: ENV["PACKAGE_NAME"],' >> ./usr/ios/fastlane/Fastfile
          echo '        ipa: "./build/ios/ipa/app.ipa",' >> ./usr/ios/fastlane/Fastfile
          echo '        skip_screenshots: true,' >> ./usr/ios/fastlane/Fastfile
          echo '        skip_metadata: true,' >> ./usr/ios/fastlane/Fastfile
          echo '        precheck_include_in_app_purchases: false,' >> ./usr/ios/fastlane/Fastfile
          echo '        submit_for_review: false' >> ./usr/ios/fastlane/Fastfile
          echo '      )' >> ./usr/ios/fastlane/Fastfile
          echo '      ' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.success("Successfully built and uploaded iOS app")' >> ./usr/ios/fastlane/Fastfile
          echo '    rescue => error' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.error("Build failed: #{error.message}")' >> ./usr/ios/fastlane/Fastfile
          echo '      raise error' >> ./usr/ios/fastlane/Fastfile
          echo '    ensure' >> ./usr/ios/fastlane/Fastfile
          echo '      # 清理资源' >> ./usr/ios/fastlane/Fastfile
          echo '      UI.message("Cleaning up resources")' >> ./usr/ios/fastlane/Fastfile
          echo '      # 删除临时密钥文件' >> ./usr/ios/fastlane/Fastfile
          echo '      FileUtils.rm_f(key_path) if defined?(key_path) && File.exist?(key_path)' >> ./usr/ios/fastlane/Fastfile
          echo '      # 删除证书文件' >> ./usr/ios/fastlane/Fastfile
          echo '      FileUtils.rm_f("certificate.p12") if File.exist?("certificate.p12")' >> ./usr/ios/fastlane/Fastfile
          echo '      # 清理keychain' >> ./usr/ios/fastlane/Fastfile
          echo '      if defined?(keychain_name) && !keychain_name.nil?' >> ./usr/ios/fastlane/Fastfile
          echo '        begin' >> ./usr/ios/fastlane/Fastfile
          echo '          delete_keychain(name: keychain_name) if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))' >> ./usr/ios/fastlane/Fastfile
          echo '        rescue => e' >> ./usr/ios/fastlane/Fastfile
          echo '          UI.error("Error deleting keychain: #{e.message}")' >> ./usr/ios/fastlane/Fastfile
          echo '        end' >> ./usr/ios/fastlane/Fastfile
          echo '      end' >> ./usr/ios/fastlane/Fastfile
          echo '    end' >> ./usr/ios/fastlane/Fastfile
          echo '  end' >> ./usr/ios/fastlane/Fastfile
          echo 'end' >> ./usr/ios/fastlane/Fastfile
      - name: Build and publish iOS app with Fastlane
        working-directory: ./usr/ios
        env:
          PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          APP_STORE_CREDENTIALS_JSON: ${{ secrets.APP_STORE_CREDENTIALS_JSON }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: fastlane build_and_publish
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-build
          path: ./usr/ios/build/ios/ipa/*.ipa
          retention-days: 7
